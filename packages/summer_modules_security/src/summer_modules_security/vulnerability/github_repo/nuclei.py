from __future__ import annotations

import json
from pathlib import Path
from typing import Callable, Optional

import httpx

from summer_modules_core import load_config
from summer_modules_core.logger import init_and_get_logger

from ..._storage import get_storage_dir

ClientFactory = Callable[[], httpx.Client]

_NUCLEI_STORAGE_DIR = get_storage_dir("vulnerability", "nuclei")
_NUCLEI_CACHE_PATH = _NUCLEI_STORAGE_DIR / "nuclei_http_cve_dict.json"
logger = init_and_get_logger(_NUCLEI_STORAGE_DIR, "github_repo_logger")


def get_write_nuclei_http_cve_dict(
    github_token: str | None = None,
    *,
    local_path: Path | None = None,
    enable_local_cache: bool = True,
    client_factory: ClientFactory | None = None,
) -> Optional[dict[str, str]]:
    """获取 Nuclei 模板仓库中的 CVE 索引并写入本地缓存。"""
    cache_path = local_path or _NUCLEI_CACHE_PATH
    cache_path.parent.mkdir(parents=True, exist_ok=True)

    token = github_token or load_config("security").get("github_token")
    if not token:
        raise ValueError(
            "缺少 GitHub Token。请通过参数或 config.toml 的 [security].github_token 提供。"
        )

    if enable_local_cache and cache_path.exists():
        return json.loads(cache_path.read_text(encoding="utf-8"))

    headers = {
        "User-Agent": "summer-modules-security/1.0",
        "Authorization": f"Bearer {token}",
        "Accept": "application/vnd.github+json",
        "X-GitHub-Api-Version": "2022-11-28",
    }

    factory = client_factory or (lambda: httpx.Client(verify=False, timeout=20))

    with factory() as client:
        nuclei_data = _get_nuclei_cve_dict(client, headers)

    if nuclei_data:
        cache_path.write_text(
            json.dumps(nuclei_data, ensure_ascii=False, indent=4),
            encoding="utf-8",
        )
    return nuclei_data


def _get_nuclei_cve_dict(client: httpx.Client, headers: dict[str, str]) -> dict[str, str] | None:
    """请求 GitHub 接口并返回 Nuclei CVE 模板索引。"""
    nuclei_contents_url = (
        "https://api.github.com/repos/projectdiscovery/nuclei-templates/contents"
    )
    nuclei_cves_base_url = (
        "https://api.github.com/repos/projectdiscovery/nuclei-templates/contents/http/cves"
    )

    response = client.get(nuclei_cves_base_url, headers=headers)
    if response.status_code != 200:
        logger.error(
            "获取 Nuclei 的 CVE 列表失败: %s (status %s)",
            response.text,
            response.status_code,
        )
        return None

    http_cve_dict: dict[str, str] = {}
    for item in response.json():
        http_cve_year_url = nuclei_contents_url + item["path"]
        year_response = client.get(http_cve_year_url, headers=headers)
        year_response.raise_for_status()

        for http_cve_item in year_response.json():
            http_cve_id = http_cve_item["name"].replace(".yaml", "")
            http_cve_url = (
                "https://github.com/projectdiscovery/nuclei-templates/tree/main/"
                f"{http_cve_item['path']}"
            )
            http_cve_dict[http_cve_id] = http_cve_url

    return http_cve_dict


__all__ = ["get_write_nuclei_http_cve_dict"]
