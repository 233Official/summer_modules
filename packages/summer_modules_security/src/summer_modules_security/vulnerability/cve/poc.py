from __future__ import annotations

import json
from typing import Callable, Optional

import httpx

from summer_modules_core.utils import write_dict_to_json_file

from ..github_repo.nuclei import get_write_nuclei_http_cve_dict
from . import CVE_INFO_BASE_DIR, CVE_LOGGER

ClientFactory = Callable[[], httpx.Client]


def get_exp_poc_link_list(
    cve_id: str,
    enable_local_search: bool = True,
    *,
    client_factory: ClientFactory | None = None,
    nuclei_cache: Optional[dict[str, str]] = None,
) -> dict:
    """汇总指定 CVE 的 EXP/POC 链接。

    参数:
        cve_id: 目标 CVE 编号。
        enable_local_search: 是否允许使用本地缓存。
        client_factory: 自定义 httpx.Client 创建函数，便于测试。
        nuclei_cache: 预先提供的 Nuclei 缓存数据。

    返回:
        包含操作结果与链接列表的字典。
    """
    exp_poc_link_list: list[str] = []
    success = False

    exploit_db_result = get_exp_link_list_from_exploit_db(
        cve_id,
        enable_local_search,
        client_factory=client_factory,
    )
    if exploit_db_result["success"]:
        exp_links = exploit_db_result["exp_link_list"]
        if exp_links:
            exp_poc_link_list.extend(exp_links)
        else:
            CVE_LOGGER.info("Exploit Database 无对应 EXP 链接")
        success = True
    else:
        info = f"Exploit Database 获取 EXP 链接失败, {exploit_db_result['info']}"
        CVE_LOGGER.error(info)

    nuclei_poc_link = get_nuclei_poc_link(cve_id, nuclei_cache=nuclei_cache)
    if nuclei_poc_link:
        exp_poc_link_list.append(nuclei_poc_link)
    else:
        CVE_LOGGER.info("Nuclei 无对应 POC 链接")

    return {"success": success, "exp_poc_link_list": exp_poc_link_list}


def get_exp_link_list_from_exploit_db(
    cve_id: str,
    enable_local_search: bool = True,
    *,
    client_factory: ClientFactory | None = None,
) -> dict:
    """从 Exploit Database 获取 CVE 对应的 EXP 链接列表。"""
    exp_link_list: list[str] = []
    success = False
    info = ""

    cve_info_dir = CVE_INFO_BASE_DIR / cve_id
    cve_info_dir.mkdir(parents=True, exist_ok=True)
    cache_path = cve_info_dir / f"{cve_id}_exploit_db_exp.json"
    if enable_local_search and cache_path.exists():
        CVE_LOGGER.debug(f"本地已存在 Exploit-db EXP 信息: {cve_id}，从本地读取")
        exp_links_response_json = json.loads(cache_path.read_text(encoding="utf-8"))
        exp_link_list = _get_exp_link_list_from_exploit_db_json_response(
            exp_links_response_json
        )
        if exp_link_list:
            CVE_LOGGER.info(
                "从本地获取到的 Exploit Database EXP 链接: %s", exp_link_list
            )
        else:
            CVE_LOGGER.info("从本地获取到的 Exploit Database EXP 链接为空")
        return {"success": True, "exp_link_list": exp_link_list, "info": info}

    exploit_db_url = (
        "https://www.exploit-db.com/search?"
        f"cve={cve_id}&draw=1&columns%5B0%5D%5Bdata%5D=date_published"
    )

    headers = {
        "authority": "www.exploit-db.com",
        "sec-ch-ua-platform": '"macOS"',
        "x-requested-with": "XMLHttpRequest",
        "user-agent": "Mozilla/5.0",
        "accept": "application/json, text/javascript, */*; q=0.01",
    }

    factory = client_factory or (lambda: httpx.Client(verify=False, timeout=20))

    with factory() as client:
        try:
            response = client.get(exploit_db_url, headers=headers)
        except httpx.RequestError as exc:
            info = f"请求 Exploit Database 时发生错误: {exc}"
            CVE_LOGGER.error(info)
            return {"success": False, "exp_link_list": exp_link_list, "info": info}

    if response.status_code == 200:
        response_data_json = response.json()
        write_dict_to_json_file(response_data_json, cache_path)
        exp_link_list = _get_exp_link_list_from_exploit_db_json_response(
            response_data_json
        )
        if exp_link_list:
            CVE_LOGGER.info("从 Exploit Database 获取到 EXP 链接: %s", exp_link_list)
        else:
            info = "从 Exploit Database Response 未获取到 EXP 链接"
            CVE_LOGGER.info(info)
        success = True
    else:
        info = f"访问 Exploit Database 失败，状态码：{response.status_code}"
        CVE_LOGGER.error(info)

    return {"success": success, "exp_link_list": exp_link_list, "info": info}


def get_nuclei_poc_link(
    cve_id: str, *, nuclei_cache: Optional[dict[str, str]] = None
) -> str:
    """从 Nuclei 模板索引中获取 CVE 的 POC 链接。"""
    nuclei_http_cve_dict = nuclei_cache or get_write_nuclei_http_cve_dict()
    if not nuclei_http_cve_dict:
        return ""
    nuclei_http_poc_link = nuclei_http_cve_dict.get(cve_id, "")
    if nuclei_http_poc_link:
        CVE_LOGGER.info("获取到 Nuclei POC 链接: %s", nuclei_http_poc_link)
    else:
        CVE_LOGGER.info("Nuclei 无 %s 的 POC 链接", cve_id)
    return nuclei_http_poc_link


def _get_exp_link_list_from_exploit_db_json_response(response_data_json: dict) -> list[str]:
    """解析 Exploit Database 返回的 JSON，提取 EXP 链接列表。"""
    exp_url_list = [
        f"https://www.exploit-db.com/exploits/{item['id']}"
        for item in response_data_json.get("data", [])
    ]
    if exp_url_list:
        CVE_LOGGER.info("从 Exploit Database Response 获取到 EXP 链接: %s", exp_url_list)
    else:
        CVE_LOGGER.info("从 Exploit Database Response 未获取到 EXP 链接")
    return exp_url_list


__all__ = [
    "get_exp_poc_link_list",
    "get_exp_link_list_from_exploit_db",
    "get_nuclei_poc_link",
    "_get_exp_link_list_from_exploit_db_json_response",
]
